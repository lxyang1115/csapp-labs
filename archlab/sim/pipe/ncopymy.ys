#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len words to dst.
# Return the number of positive words (>0) contained in src.
#
# Include your name and ID here. 58.3
# Lu Xiaoyang
# 518021910416
#
# Describe how and why you modified the baseline code.
#
##################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = len
ncopy:

##################################################################
# You can modify this portion
# 3 -> ((1 -> (0, 2)), (5 -> (4, 6))) Remain judge tree
	# Loop header
	iaddq $-7, %rdx		# len < 7?
	jl Root			# if so, goto Root

Loop1:
	mrmovq (%rdi), %r8	# read val from src...
	mrmovq 8(%rdi), %r9	# read val from src... reduce bubble
	rmmovq %r8, (%rsi)	# ...and store it to dst
	andq %r8, %r8		# val <= 0?
	jle Loop2			# if so, goto Loop2:
	iaddq $1, %rax		# count++

Loop2:
	mrmovq 16(%rdi), %r8	# read val from src...
	rmmovq %r9, 8(%rsi)	# ...and store it to dst
	andq %r9, %r9		# val <= 0?
	jle Loop3			# if so, goto Loop3:
	iaddq $1, %rax		# count++

Loop3:
	mrmovq 24(%rdi), %r9	# read val from src...
	rmmovq %r8, 16(%rsi)	# ...and store it to dst
	andq %r8, %r8		# val <= 0?
	jle Loop4			# if so, goto Loop4:
	iaddq $1, %rax		# count++

Loop4:
	mrmovq 32(%rdi), %r8	# read val from src...
	rmmovq %r9, 24(%rsi)	# ...and store it to dst
	andq %r9, %r9		# val <= 0?
	jle Loop5			# if so, goto Loop5:
	iaddq $1, %rax		# count++

Loop5:
	mrmovq 40(%rdi), %r9	# read val from src...
	rmmovq %r8, 32(%rsi)	# ...and store it to dst
	andq %r8, %r8		# val <= 0?
	jle Loop6			# if so, goto Loop6:
	iaddq $1, %rax		# count++

Loop6:
	mrmovq 48(%rdi), %r8	# read val from src...
	rmmovq %r9, 40(%rsi)	# ...and store it to dst
	andq %r9, %r9		# val <= 0?
	jle Loop7			# if so, goto Loop7:
	iaddq $1, %rax		# count++

Loop7:
	rmmovq %r8, 48(%rsi)	# ...and store it to dst
	andq %r8, %r8		# val <= 0?
	jle Loop			# if so, goto Loop:
	iaddq $1, %rax		# count++

Loop:
	iaddq $56, %rdi		# src++
	iaddq $56, %rsi		# dst++
	iaddq $-7, %rdx		# len >= 7?
	jge Loop1			# if so, goto Loop1:

Root:
	iaddq $4, %rdx		# len == 3?
	jl L
	jg R
	je rm3

L:
	iaddq $1, %rdx		# len == 2?
	je rm2
	iaddq $1, %rdx		# len == 1?
	je rm1
	ret					# Remain 0

R:
	iaddq $-2, %rdx		# len == 5?
	jl rm4
	je rm5

rm6:
	mrmovq 40(%rdi), %r8	# read val from src...
	rmmovq %r8, 40(%rsi)
	andq %r8, %r8		# val <= 0?	Remain to add %rax, reduce bubble
						# this needs the results before are less or equal than 0 (L and R)

rm5:
	mrmovq 32(%rdi), %r8	# read val from src...
	jle rm51			# if so, goto:
	iaddq $1, %rax		# count++

rm51:
	rmmovq %r8, 32(%rsi)
	andq %r8, %r8		# val <= 0?	Remain to add, reduce bubble

rm4:
	mrmovq 24(%rdi), %r8	# read val from src...
	jle rm41			# if so, goto:
	iaddq $1, %rax		# count++

rm41:
	rmmovq %r8, 24(%rsi)
	andq %r8, %r8		# val <= 0?	Remain to add, reduce bubble

rm3:
	mrmovq 16(%rdi), %r8	# read val from src...
	jle rm31			# if so, goto:
	iaddq $1, %rax		# count++

rm31:
	rmmovq %r8, 16(%rsi)
	andq %r8, %r8		# val <= 0?	Remain to add, reduce bubble

rm2:
	mrmovq 8(%rdi), %r8		# read val from src...
	jle rm21			# if so, goto:
	iaddq $1, %rax		# count++

rm21:
	rmmovq %r8, 8(%rsi)
	andq %r8, %r8		# val <= 0?	Remain to add, reduce bubble

rm1:
	mrmovq (%rdi), %r8		# read val from src...
	jle rm11			# if so, goto:
	iaddq $1, %rax		# count++

rm11:
	rmmovq %r8, (%rsi)
	andq %r8, %r8		# val <= 0?	Remain to add, reduce bubble
	jle Done			# if so, goto Done:
	iaddq $0x1, %rax		# count++


##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
