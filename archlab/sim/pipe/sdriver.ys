#######################################################################
# Test for copying block of size 4;
#######################################################################
	.pos 0
main:	irmovq Stack, %rsp  	# Set up stack pointer

	# Set up arguments for copy function and then invoke it
	irmovq $4, %rdx		# src and dst have 4 elements
	irmovq dest, %rsi	# dst array
	irmovq src, %rdi	# src array
	call ncopy		 
	halt			# should halt with num nonzeros in %rax
StartFun:
#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len words to dst.
# Return the number of positive words (>0) contained in src.
#
# Include your name and ID here.
# Lu Xiaoyang
# 518021910416
#
# Describe how and why you modified the baseline code.
#
##################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = len
ncopy:

##################################################################
# You can modify this portion
# 3 -> ((1 -> (0, 2)), (5 -> (4, 6))) Remain judge tree
	# Loop header
	iaddq $-7, %rdx		# len < 7?
	jl Root			# if so, goto Root

Loop:
	mrmovq (%rdi), %r8	# read val from src...
	mrmovq 8(%rdi), %r9	# read val from src...
	mrmovq 16(%rdi), %r10	# read val from src...
	mrmovq 24(%rdi), %r11	# read val from src...
	mrmovq 32(%rdi), %r12	# read val from src...
	mrmovq 40(%rdi), %r13	# read val from src...
	mrmovq 48(%rdi), %r14	# read val from src...

	rmmovq %r8, (%rsi)	# ...and store it to dst

	andq %r8, %r8		# val <= 0?
	jle Judge1			# if so, goto Judge:
	iaddq $1, %rax		# count++
Judge1:
	rmmovq %r9, 8(%rsi)	# ...and store it to dst
	andq %r9, %r9		# val <= 0?
	jle Judge2			# if so, goto Judge:
	iaddq $1, %rax		# count++
Judge2:
	rmmovq %r10, 16(%rsi)	# ...and store it to dst
	andq %r10, %r10		# val <= 0?
	jle Judge3			# if so, goto Judge:
	iaddq $1, %rax		# count++
Judge3:
	rmmovq %r11, 24(%rsi)	# ...and store it to dst
	andq %r11, %r11		# val <= 0?
	jle Judge4			# if so, goto Judge:
	iaddq $1, %rax		# count++
Judge4:
	rmmovq %r12, 32(%rsi)	# ...and store it to dst
	andq %r12, %r12		# val <= 0?
	jle Judge5			# if so, goto Judge:
	iaddq $1, %rax		# count++
Judge5:
	rmmovq %r13, 40(%rsi)	# ...and store it to dst
	andq %r13, %r13		# val <= 0?
	jle Judge6			# if so, goto Judge:
	iaddq $1, %rax		# count++
Judge6:
	rmmovq %r14, 48(%rsi)	# ...and store it to dst
	andq %r14, %r14		# val <= 0?
	jle Final			# if so, goto Judge:
	iaddq $1, %rax		# count++

Final:
	iaddq $56, %rdi		# src++
	iaddq $56, %rsi		# dst++
	iaddq $-7, %rdx		# len >= 7?
	jge Loop			# if so, goto Loop:

Root:
	iaddq $4, %rdx		# len == 3?
	jl L
	jg R
	je rm3

L:
	iaddq $1, %rdx		# len == 2?
	je rm2
	iaddq $1, %rdx		# len == 1?
	je rm1
	ret					# Remain 0

R:
	iaddq $-2, %rdx		# len == 5?
	jl rm4
	je rm5

rm6:
	mrmovq 40(%rdi), %r8	# read val from src...
	rmmovq %r8, 40(%rsi)
	andq %r8, %r8		# val <= 0?	Remain to add %rax, reduce bubble
						# this needs the results before are less or equal than 0 (L and R)

rm5:
	mrmovq 32(%rdi), %r8	# read val from src...
	jle rm51			# if so, goto:
	iaddq $1, %rax		# count++

rm51:
	rmmovq %r8, 32(%rsi)
	andq %r8, %r8		# val <= 0?	Remain to add, reduce bubble

rm4:
	mrmovq 24(%rdi), %r8	# read val from src...
	jle rm41			# if so, goto:
	iaddq $1, %rax		# count++

rm41:
	rmmovq %r8, 24(%rsi)
	andq %r8, %r8		# val <= 0?	Remain to add, reduce bubble

rm3:
	mrmovq 16(%rdi), %r8	# read val from src...
	jle rm31			# if so, goto:
	iaddq $1, %rax		# count++

rm31:
	rmmovq %r8, 16(%rsi)
	andq %r8, %r8		# val <= 0?	Remain to add, reduce bubble

rm2:
	mrmovq 8(%rdi), %r8		# read val from src...
	jle rm21			# if so, goto:
	iaddq $1, %rax		# count++

rm21:
	rmmovq %r8, 8(%rsi)
	andq %r8, %r8		# val <= 0?	Remain to add, reduce bubble

rm1:
	mrmovq (%rdi), %r8		# read val from src...
	jle rm11			# if so, goto:
	iaddq $1, %rax		# count++

rm11:
	rmmovq %r8, (%rsi)
	andq %r8, %r8		# val <= 0?	Remain to add, reduce bubble
	jle Done			# if so, goto Done:
	iaddq $0x1, %rax		# count++


##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
EndFun:

###############################
# Source and destination blocks 
###############################
	.align 8
src:
	.quad 1
	.quad -2
	.quad 3
	.quad -4
	.quad 0xbcdefa # This shouldn't get moved

	.align 16
Predest:
	.quad 0xbcdefa
dest:
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
Postdest:
	.quad 0xdefabc

.align 8
# Run time stack
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0

Stack:
